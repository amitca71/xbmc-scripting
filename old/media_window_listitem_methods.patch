Index: lib/libPython/xbmcmodule/GUIPythonWindowXML.cpp
===================================================================
--- lib/libPython/xbmcmodule/GUIPythonWindowXML.cpp	(revision 8928)
+++ lib/libPython/xbmcmodule/GUIPythonWindowXML.cpp	(working copy)
@@ -192,7 +192,77 @@
   UpdateButtons();
 }
 
+void CGUIPythonWindowXML::SetLabel(const CStdString& strLabel)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    m_vecItems[iItem]->SetLabel(strLabel);
+}
 
+void CGUIPythonWindowXML::GetLabel(CStdString &strLabel)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    strLabel = m_vecItems[iItem]->GetLabel();
+}
+
+void CGUIPythonWindowXML::SetLabel2(const CStdString& strLabel2)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    m_vecItems[iItem]->SetLabel2(strLabel2);
+}
+
+void CGUIPythonWindowXML::GetLabel2(CStdString& strLabel2)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    strLabel2 = m_vecItems[iItem]->GetLabel2();
+}
+
+void CGUIPythonWindowXML::SetThumbnailImage(const CStdString& strThumbnail)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    m_vecItems[iItem]->SetThumbnailImage(strThumbnail);
+}
+
+void CGUIPythonWindowXML::GetThumbnailImage(CStdString& strThumbnail)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    strThumbnail = m_vecItems[iItem]->GetThumbnailImage();
+}
+
+void CGUIPythonWindowXML::SetIconImage(const CStdString& strIcon)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    m_vecItems[iItem]->SetIconImage(strIcon);
+}
+
+void CGUIPythonWindowXML::GetIconImage(CStdString& strIcon)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    strIcon = m_vecItems[iItem]->GetIconImage();
+}
+
+void CGUIPythonWindowXML::Select(bool bOnOff)
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    m_vecItems[iItem]->Select(bOnOff);
+}
+
+bool CGUIPythonWindowXML::IsSelected() const
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem >= 0)
+    return m_vecItems[iItem]->IsSelected();
+  return false;
+}
+
 int CGUIPythonWindowXML::GetCurrentListPosition()
 {
   return m_viewControl.GetSelectedItem();
@@ -200,7 +270,7 @@
 
 void CGUIPythonWindowXML::SetCurrentListPosition(int item)
 {
-  return m_viewControl.SetSelectedItem(item);
+  m_viewControl.SetSelectedItem(item);
 }
 
 CFileItem * CGUIPythonWindowXML::GetListItem(int position)
@@ -213,6 +283,13 @@
   return selectedItem;
 }
 
+CFileItem *CGUIPythonWindowXML::GetCurrentListItem()
+{
+  int iItem = m_viewControl.GetSelectedItem();
+  if (iItem < 0) return NULL;
+  return m_vecItems[iItem];
+}
+
 void CGUIPythonWindowXML::RefreshList()
 {
   m_viewControl.SetItems(m_vecItems);
Index: lib/libPython/xbmcmodule/GUIPythonWindowXML.h
===================================================================
--- lib/libPython/xbmcmodule/GUIPythonWindowXML.h	(revision 8928)
+++ lib/libPython/xbmcmodule/GUIPythonWindowXML.h	(working copy)
@@ -25,6 +25,23 @@
   CFileItem*      GetListItem(int position);
   int             GetCurrentListPosition();
   void            SetCurrentListPosition(int item);
+  virtual void    SetLabel(const CStdString& strLabel);
+  void            GetLabel(CStdString& strLabel);
+  void            SetLabel2(const CStdString& strLabel);
+  void            GetLabel2(CStdString& strLabel);
+  void            SetIconImage(const CStdString& strIcon);
+  void            GetIconImage(CStdString& strLabel);
+  void            SetThumbnailImage(const CStdString& strThumbnail);
+  void            GetThumbnailImage(CStdString& strLabel);
+  //void            SetOverlayImage(GUIIconOverlay icon, bool bOnOff=false);
+  //CStdString      GetOverlayImage() const;
+  void            Select(bool bOnOff);
+  bool            IsSelected() const;
+  //bool            HasIcon() const;
+  //bool            HasThumbnail() const;
+  virtual bool      IsMediaWindow() const { return true; };
+  virtual CFileItem *GetCurrentListItem();
+
 protected:
   CGUIControl     *GetFirstFocusableControl(int id);
   virtual void    UpdateButtons();
Index: lib/libPython/xbmcmodule/listitem.cpp
===================================================================
--- lib/libPython/xbmcmodule/listitem.cpp	(revision 8928)
+++ lib/libPython/xbmcmodule/listitem.cpp	(working copy)
@@ -65,7 +65,6 @@
     {
       self->item->SetThumbnailImage( cThumbnailImage );
     }
-
     return (PyObject*)self;
   }
 
@@ -95,7 +94,7 @@
   }
 
   PyDoc_STRVAR(getLabel__doc__,
-    "getLabel() -- Returns the listitem label."
+    "getLabel() -- Returns the listitem label.\n"
     "\n"
     "example:\n"
     "  - label = self.list.getSelectedItem().getLabel()\n");
@@ -112,7 +111,7 @@
   }
 
   PyDoc_STRVAR(getLabel2__doc__,
-    "getLabel2() -- Returns the listitem's second label."
+    "getLabel2() -- Returns the listitem's second label.\n"
     "\n"
     "example:\n"
     "  - label2 = self.list.getSelectedItem().getLabel2()\n");
@@ -122,14 +121,14 @@
     if (!self->item) return NULL;
 
     PyGUILock();
-    const char *cLabel =  self->item->GetLabel2().c_str();
+    const char *cLabel = self->item->GetLabel2().c_str();
     PyGUIUnlock();
 
     return Py_BuildValue("s", cLabel);
   }
 
   PyDoc_STRVAR(setLabel__doc__,
-    "setLabel(label) -- Sets the listitem's label."
+    "setLabel(label) -- Sets the listitem's label.\n"
     "\n"
     "label          : string or unicode - text string.\n"
     "\n"
@@ -156,7 +155,7 @@
   }
 
   PyDoc_STRVAR(setLabel2__doc__,
-    "setLabel2(label2) -- Sets the listitem's second label."
+    "setLabel2(label2) -- Sets the listitem's second label.\n"
     "\n"
     "label2         : string or unicode - text string.\n"
     "\n"
@@ -183,9 +182,9 @@
   }
 
   PyDoc_STRVAR(setIconImage__doc__,
-    "setIconImage(icon) -- Sets the listitem's icon image."
+    "setIconImage(icon) -- Sets the listitem's icon image.\n"
     "\n"
-    "thumb           : string - image filename.\n"
+    "icon            : string - image filename.\n"
     "\n"
     "example:\n"
     "  - self.list.getSelectedItem().setIconImage('emailread.png')\n");
@@ -207,7 +206,7 @@
   }
 
   PyDoc_STRVAR(setThumbnailImage__doc__,
-    "setThumbnailImage(thumb) -- Sets the listitem's thumbnail image."
+    "setThumbnailImage(thumb) -- Sets the listitem's thumbnail image.\n"
     "\n"
     "thumb           : string - image filename.\n"
     "\n"
@@ -242,11 +241,11 @@
   {
     if (!self->item) return NULL;
 
-    char bSelected = 0;
-    if (!PyArg_ParseTuple(args, "b", &bSelected))	return NULL;
+    bool bOnOff = false;
+    if (!PyArg_ParseTuple(args, "b", &bOnOff))	return NULL;
 
     PyGUILock();
-    self->item->Select(bSelected != 0);
+    self->item->Select(bOnOff);
     PyGUIUnlock();
 
     Py_INCREF(Py_None);
@@ -264,10 +263,10 @@
     if (!self->item) return NULL;
 
     PyGUILock();
-    bool bSelected = self->item->IsSelected();
+    bool bOnOff = self->item->IsSelected();
     PyGUIUnlock();
 
-    return Py_BuildValue("b", bSelected);
+    return Py_BuildValue("b", bOnOff);
   }
   
   PyMethodDef ListItem_methods[] = {
@@ -285,7 +284,15 @@
   PyDoc_STRVAR(listItem__doc__,
     "ListItem class.\n"
     "\n"
-    "ListItem([string label, string label2, string iconImage, string thumbnailImage]) -- Creates a new ListItem.");
+    "ListItem([label, label2, iconImage, thumbnailImage]) -- Creates a new ListItem.\n"
+    "\n"
+    "label          : [opt] string or unicode - label1 text.\n"
+    "label2         : [opt] string or unicode - label2 text.\n"
+    "iconImage      : [opt] string - icon filename.\n"
+    "thumbnailImage : [opt] string - thumbnail filename.\n"
+    "\n"
+    "example:\n"
+    "  - listitem = xbmcgui.ListItem('Casino Royale', '[PG-13]', 'blank-poster.tbn', 'poster.tbn')\n");
 
 // Restore code and data sections to normal.
 #pragma code_seg()
Index: lib/libPython/xbmcmodule/winxml.cpp
===================================================================
--- lib/libPython/xbmcmodule/winxml.cpp	(revision 8928)
+++ lib/libPython/xbmcmodule/winxml.cpp	(working copy)
@@ -97,15 +97,16 @@
 
   PyObject* WindowXML_RemoveItem(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+
     int itemPosition;
     if (!PyArg_ParseTuple(args, "i", &itemPosition))  return NULL;
+    
     CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+    
     // Tells the window to remove the item at the specified position from the FileItem vector
+    PyGUILock();
     pwx->RemoveItem(itemPosition);
-
-    // send message
-    PyGUILock();
-
     PyGUIUnlock();
 
     Py_INCREF(Py_None);
@@ -123,12 +124,16 @@
 
   PyObject* WindowXML_AddItem(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+    
+    PyObject *pObject;
     int itemPosition = -1;
-    PyObject *pObject;
+    if (!PyArg_ParseTuple(args, "O|i", &pObject,&itemPosition))  return NULL;
+    
     string strText;
     ListItem* pListItem = NULL;
     bool bRefresh = true;
-    if (!PyArg_ParseTuple(args, "O|i", &pObject,&itemPosition))  return NULL;
+    
     if (ListItem_CheckExact(pObject))
     {
       // object is a listitem
@@ -140,23 +145,14 @@
       // object is probably a text item
       if (!PyGetUnicodeString(strText, pObject, 1)) return NULL;
       // object is a unicode string now, create a new ListItem
-
       pListItem = ListItem_FromString(strText);
     }
     
-    PyGUILock();
     CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
     
     // Tells the window to add the item to FileItem vector
+    PyGUILock();
     pwx->AddItem((CFileItem *)pListItem->item,itemPosition);
-
-    // create message
-    //CGUIMessage msg(GUI_MSG_LABEL_ADD, self->iWindowId, self->iWindowId);
-    //msg.SetLPVOID(pListItem->item);
-
-    // send message
-    
-    //if (self->pWindow) self->pWindow->OnMessage(msg);
     PyGUIUnlock();
 
     Py_INCREF(Py_None);
@@ -170,12 +166,18 @@
 
   PyObject* WindowXML_RefreshList(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+    
     CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
-    // Tells the window to add the item to FileItem vector
+
+    PyGUILock();
     pwx->RefreshList();
+    PyGUIUnlock();
+    
     Py_INCREF(Py_None);
     return Py_None;
   }
+  
   PyDoc_STRVAR(ClearList__doc__,
     "clearList() -- Clear the Window List\n"
     "\n"
@@ -184,8 +186,14 @@
 
   PyObject* WindowXML_ClearList(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+    
     CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+    
+    PyGUILock();
     pwx->ClearList();
+    PyGUIUnlock();
+    
     Py_INCREF(Py_None);
     return Py_None;
   }
@@ -197,10 +205,17 @@
 
   PyObject* WindowXML_SetCurrentListPosition(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+    
     CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+    
     int listPos = -1;
     if (!PyArg_ParseTuple(args, "i",&listPos))  return NULL;
+    
+    PyGUILock();
     pwx->SetCurrentListPosition(listPos);
+    PyGUIUnlock();
+
     Py_INCREF(Py_None);
     return Py_None;
   }
@@ -209,31 +224,66 @@
     "getCurrentListPosition() -- Gets the current position in the Window List\n"
     "\n"
     "example:\n"
-    "  - self.getCurrentListPosition()\n");
+    "  - pos = self.getCurrentListPosition()\n");
   
  PyObject* WindowXML_GetCurrentListPosition(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+    
     int listPos = -1;
     CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+    
+    PyGUILock();
     listPos = pwx->GetCurrentListPosition();
+    PyGUIUnlock();
+    
     Py_INCREF(Py_None);
     return Py_BuildValue("l", listPos);
   }
+
   PyDoc_STRVAR(getListItem__doc__,
     "getListItem(int) -- Returns a given ListItem in the WindowList\n"
     "\n"
     "example:\n"
-    "  - self.getListItem(6)\n");
+    "  - listitem = self.getListItem(6)\n");
   
  PyObject* WindowXML_GetListItem(WindowXML *self, PyObject *args)
   {
+    if (!self->pWindow) return NULL;
+
     int listPos = -1;
-    if (!PyArg_ParseTuple(args, "i",&listPos))  return NULL;
+    if (!PyArg_ParseTuple(args, "i",&listPos)) return NULL;
     
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+    
     PyGUILock();
-    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
     CFileItem * fi = pwx->GetListItem(listPos);
+    ListItem* sListItem = (ListItem*)ListItem_Type.tp_alloc(&ListItem_Type, 0);
+    sListItem->item = new CGUIListItem();
+    sListItem->item->SetLabel(fi->GetLabel());
+    sListItem->item->SetLabel2(fi->GetLabel2());
+    sListItem->item->SetIconImage(fi->GetIconImage());
+    sListItem->item->SetThumbnailImage(fi->GetThumbnailImage());
+    PyGUIUnlock();
     
+    Py_INCREF(sListItem);
+    return (PyObject *)sListItem;
+  }
+
+  PyDoc_STRVAR(getCurrentListItem__doc__,
+    "getListItem(int) -- Returns the current ListItem in the WindowList\n"
+    "\n"
+    "example:\n"
+    "  - listitem = self.getCurrentListItem()\n");
+  
+ PyObject* WindowXML_GetCurrentListItem(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+    
+    PyGUILock();
+    CFileItem * fi = pwx->GetCurrentListItem();
     ListItem* sListItem = (ListItem*)ListItem_Type.tp_alloc(&ListItem_Type, 0);
     sListItem->item = new CGUIListItem();
     sListItem->item->SetLabel(fi->GetLabel());
@@ -241,9 +291,244 @@
     sListItem->item->SetIconImage(fi->GetIconImage());
     sListItem->item->SetThumbnailImage(fi->GetThumbnailImage());
     PyGUIUnlock();
+    
     Py_INCREF(sListItem);
     return (PyObject *)sListItem;
   }
+
+  PyDoc_STRVAR(setLabel__doc__,
+    "setLabel(label) -- Sets the media listitem's label.\n"
+    "\n"
+    "label          : string or unicode - text string.\n"
+    "\n"
+    "example:\n"
+    "  - self.setLabel('Casino Royale')\n");
+
+  PyObject* WindowXML_SetLabel(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+    
+    PyObject* uLine = NULL;
+    if (!PyArg_ParseTuple(args, "O", &uLine))	return NULL;
+
+    string utf8Line;
+    if (uLine && !PyGetUnicodeString(utf8Line, uLine, 1))
+      return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    // set Label
+    PyGUILock();
+    pwx->SetLabel(utf8Line);
+    PyGUIUnlock();
+
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+
+  PyDoc_STRVAR(getLabel__doc__,
+    "getLabel() -- Returns the current selected media listitem's label.\n"
+    "\n"
+    "example:\n"
+    "  - label = self.getLabel()\n");
+
+  PyObject* WindowXML_GetLabel(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    CStdString strLabel; 
+    PyGUILock();
+    pwx->GetLabel(strLabel);
+    PyGUIUnlock();
+
+    return Py_BuildValue("s", strLabel.c_str());
+  }
+
+  PyDoc_STRVAR(setLabel2__doc__,
+    "setLabel(label) -- Sets the media listitem's label2.\n"
+    "\n"
+    "label          : string or unicode - text string.\n"
+    "\n"
+    "example:\n"
+    "  - self.setLabel('[PG-13]')\n");
+
+  PyObject* WindowXML_SetLabel2(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+    
+    PyObject* uLine = NULL;
+    if (!PyArg_ParseTuple(args, "O", &uLine))	return NULL;
+
+    string utf8Line;
+    if (uLine && !PyGetUnicodeString(utf8Line, uLine, 1))
+      return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    // set Label
+    PyGUILock();
+    pwx->SetLabel2(utf8Line);
+    PyGUIUnlock();
+
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+
+  PyDoc_STRVAR(getLabel2__doc__,
+    "getLabel() -- Returns the current selected media listitem's label2.\n"
+    "\n"
+    "example:\n"
+    "  - label = self.getLabel2()\n");
+
+  PyObject* WindowXML_GetLabel2(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    CStdString strLabel2; 
+    PyGUILock();
+    pwx->GetLabel2(strLabel2);
+    PyGUIUnlock();
+
+    return Py_BuildValue("s", strLabel2.c_str());
+  }
+
+  PyDoc_STRVAR(setThumbnailImage__doc__,
+    "setThumbnailImage(thumb) -- Sets the media listitem's thumbnail image.\n"
+    "\n"
+    "thumb           : string - image filename.\n"
+    "\n"
+    "example:\n"
+    "  - self.setThumbnailImage('emailread.png')\n");
+
+  PyObject* WindowXML_SetThumbnailImage(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+    
+    char *cLine = NULL;
+    if (!PyArg_ParseTuple(args, "s", &cLine))	return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    PyGUILock();
+    pwx->SetThumbnailImage(cLine ? cLine : "");
+    PyGUIUnlock();
+
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+
+  PyDoc_STRVAR(getThumbnailImage__doc__,
+    "getThumbnailImage() -- Returns the current selected media listitem's thumbnail.\n"
+    "\n"
+    "example:\n"
+    "  - thumb = self.getThumbnailImage()\n");
+
+  PyObject* WindowXML_GetThumbnailImage(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    CStdString strThumb; 
+    PyGUILock();
+    pwx->GetThumbnailImage(strThumb);
+    PyGUIUnlock();
+
+    return Py_BuildValue("s", strThumb.c_str());
+  }
+
+  PyDoc_STRVAR(setIconImage__doc__,
+    "setThumbnailImage(icon) -- Sets the media listitem's icon image.\n"
+    "\n"
+    "icon            : string - image filename.\n"
+    "\n"
+    "example:\n"
+    "  - self.setIconImage('emailread.png')\n");
+
+  PyObject* WindowXML_SetIconImage(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+    
+    char *cLine = NULL;
+    if (!PyArg_ParseTuple(args, "s", &cLine))	return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    PyGUILock();
+    pwx->SetIconImage(cLine ? cLine : "");
+    PyGUIUnlock();
+
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+
+  PyDoc_STRVAR(getIconImage__doc__,
+    "getIconImage() -- Returns the current selected media listitem's icon.\n"
+    "\n"
+    "example:\n"
+    "  - thumb = self.getIconImage()\n");
+
+  PyObject* WindowXML_GetIconImage(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    CStdString strIcon; 
+    PyGUILock();
+    pwx->GetIconImage(strIcon);
+    PyGUIUnlock();
+
+    return Py_BuildValue("s", strIcon.c_str());
+  }
+ 
+  PyDoc_STRVAR(select__doc__,
+    "select(selected) -- Sets the media listitem's selected status.\n"
+    "\n"
+    "selected        : bool - True=selected/False=not selected\n"
+    "\n"
+    "example:\n"
+    "  - self.select(True)\n");
+
+  PyObject* WindowXML_Select(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+    
+    bool bOnOff = false;
+    if (!PyArg_ParseTuple(args, "b", &bOnOff)) return NULL;
+
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    PyGUILock();
+    pwx->Select(bOnOff);
+    PyGUIUnlock();
+
+    Py_INCREF(Py_None);
+    return Py_None;
+  }
+
+  PyDoc_STRVAR(isSelected__doc__,
+    "isSelected() -- Returns the media listitem's selected status.\n"
+    "\n"
+    "example:\n"
+    "  - is = self.isSelected()\n");
+
+  PyObject* WindowXML_IsSelected(WindowXML *self, PyObject *args)
+  {
+    if (!self->pWindow) return NULL;
+    
+    CGUIPythonWindowXML * pwx = (CGUIPythonWindowXML*)self->pWindow;
+
+    PyGUILock();
+    bool bOnOff = pwx->IsSelected();
+    PyGUIUnlock();
+
+    return Py_BuildValue("b", bOnOff);
+  }
   
   PyDoc_STRVAR(windowXML__doc__,
     "WindowXML class.\n"
@@ -257,12 +542,23 @@
     );
   PyMethodDef WindowXML_methods[] = {
     {"addItem", (PyCFunction)WindowXML_AddItem, METH_VARARGS, addItem__doc__},
-	{"removeItem", (PyCFunction)WindowXML_RemoveItem, METH_VARARGS, removeItem__doc__},
+	  {"removeItem", (PyCFunction)WindowXML_RemoveItem, METH_VARARGS, removeItem__doc__},
     {"refreshList", (PyCFunction)WindowXML_RefreshList, METH_VARARGS, RefreshList__doc__},
     {"getCurrentListPosition", (PyCFunction)WindowXML_GetCurrentListPosition, METH_VARARGS,getCurrentListPosition__doc__},
     {"setCurrentListPosition", (PyCFunction)WindowXML_SetCurrentListPosition, METH_VARARGS,setCurrentListPosition__doc__},
     {"getListItem", (PyCFunction)WindowXML_GetListItem, METH_VARARGS,getListItem__doc__},
+    {"getCurrentListItem", (PyCFunction)WindowXML_GetCurrentListItem, METH_VARARGS,getCurrentListItem__doc__},
     {"clearList", (PyCFunction)WindowXML_ClearList, METH_VARARGS, ClearList__doc__},
+    {"setLabel", (PyCFunction)WindowXML_SetLabel, METH_VARARGS, setLabel__doc__},
+    {"getLabel", (PyCFunction)WindowXML_GetLabel, METH_VARARGS, getLabel__doc__},
+    {"setLabel2", (PyCFunction)WindowXML_SetLabel2, METH_VARARGS, setLabel2__doc__},
+    {"getLabel2", (PyCFunction)WindowXML_GetLabel2, METH_VARARGS, getLabel2__doc__},
+    {"setThumbnailImage", (PyCFunction)WindowXML_SetThumbnailImage, METH_VARARGS, setThumbnailImage__doc__},
+    {"getThumbnailImage", (PyCFunction)WindowXML_GetThumbnailImage, METH_VARARGS, getThumbnailImage__doc__},
+    {"setIconImage", (PyCFunction)WindowXML_SetIconImage, METH_VARARGS, setIconImage__doc__},
+    {"getIconImage", (PyCFunction)WindowXML_GetIconImage, METH_VARARGS, getIconImage__doc__},
+    {"select", (PyCFunction)WindowXML_Select, METH_VARARGS, select__doc__},
+    {"isSelected", (PyCFunction)WindowXML_IsSelected, METH_VARARGS, isSelected__doc__},
     {NULL, NULL, 0, NULL}
   };
 // Restore code and data sections to normal.
